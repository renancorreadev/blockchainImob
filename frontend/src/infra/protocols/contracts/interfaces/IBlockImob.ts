/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IBlockImobInterface extends utils.Interface {
  functions: {
    "nextTokenId()": FunctionFragment;
    "returnAllowed(address)": FunctionFragment;
    "returnFiiAddress(uint256)": FunctionFragment;
    "setUser(uint256,address,uint64)": FunctionFragment;
    "updateTokenDeal(uint256,uint8,address,address)": FunctionFragment;
    "userExpires(uint256)": FunctionFragment;
    "userOf(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "nextTokenId"
      | "returnAllowed"
      | "returnFiiAddress"
      | "setUser"
      | "updateTokenDeal"
      | "userExpires"
      | "userOf"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "nextTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "returnFiiAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUser",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenDeal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userExpires",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "nextTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnFiiAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenDeal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userExpires",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userOf", data: BytesLike): Result;

  events: {
    "UpdateUser(uint256,address,uint64)": EventFragment;
    "UpdatedBaseURI(string,string)": EventFragment;
    "UpdatedTokenDeal(uint256,uint8,address,address)": EventFragment;
    "UpdatedTokenURI(uint256,string,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpdateUser"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedBaseURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedTokenDeal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedTokenURI"): EventFragment;
}

export interface UpdateUserEventObject {
  tokenId: BigNumber;
  user: string;
  expires: BigNumber;
}
export type UpdateUserEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  UpdateUserEventObject
>;

export type UpdateUserEventFilter = TypedEventFilter<UpdateUserEvent>;

export interface UpdatedBaseURIEventObject {
  newBaseURI: string;
  newBaseURIText: string;
}
export type UpdatedBaseURIEvent = TypedEvent<
  [string, string],
  UpdatedBaseURIEventObject
>;

export type UpdatedBaseURIEventFilter = TypedEventFilter<UpdatedBaseURIEvent>;

export interface UpdatedTokenDealEventObject {
  tokenId: BigNumber;
  dealType: number;
  dealAddress: string;
  fiiAddress: string;
}
export type UpdatedTokenDealEvent = TypedEvent<
  [BigNumber, number, string, string],
  UpdatedTokenDealEventObject
>;

export type UpdatedTokenDealEventFilter =
  TypedEventFilter<UpdatedTokenDealEvent>;

export interface UpdatedTokenURIEventObject {
  tokenId: BigNumber;
  newURI: string;
  newURIText: string;
  newValue: string;
}
export type UpdatedTokenURIEvent = TypedEvent<
  [BigNumber, string, string, string],
  UpdatedTokenURIEventObject
>;

export type UpdatedTokenURIEventFilter = TypedEventFilter<UpdatedTokenURIEvent>;

export interface IBlockImob extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBlockImobInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    nextTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    returnAllowed(
      _party: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    returnFiiAddress(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setUser(
      tokenId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTokenDeal(
      _tokenId: PromiseOrValue<BigNumberish>,
      _dealType: PromiseOrValue<BigNumberish>,
      _dealAddress: PromiseOrValue<string>,
      _fiiAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userExpires(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  returnAllowed(
    _party: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  returnFiiAddress(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  setUser(
    tokenId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    expires: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTokenDeal(
    _tokenId: PromiseOrValue<BigNumberish>,
    _dealType: PromiseOrValue<BigNumberish>,
    _dealAddress: PromiseOrValue<string>,
    _fiiAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userExpires(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    returnAllowed(
      _party: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    returnFiiAddress(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setUser(
      tokenId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenDeal(
      _tokenId: PromiseOrValue<BigNumberish>,
      _dealType: PromiseOrValue<BigNumberish>,
      _dealAddress: PromiseOrValue<string>,
      _fiiAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userExpires(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "UpdateUser(uint256,address,uint64)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      expires?: null
    ): UpdateUserEventFilter;
    UpdateUser(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      expires?: null
    ): UpdateUserEventFilter;

    "UpdatedBaseURI(string,string)"(
      newBaseURI?: PromiseOrValue<string> | null,
      newBaseURIText?: null
    ): UpdatedBaseURIEventFilter;
    UpdatedBaseURI(
      newBaseURI?: PromiseOrValue<string> | null,
      newBaseURIText?: null
    ): UpdatedBaseURIEventFilter;

    "UpdatedTokenDeal(uint256,uint8,address,address)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      dealType?: null,
      dealAddress?: PromiseOrValue<string> | null,
      fiiAddress?: PromiseOrValue<string> | null
    ): UpdatedTokenDealEventFilter;
    UpdatedTokenDeal(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      dealType?: null,
      dealAddress?: PromiseOrValue<string> | null,
      fiiAddress?: PromiseOrValue<string> | null
    ): UpdatedTokenDealEventFilter;

    "UpdatedTokenURI(uint256,string,string,string)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      newURI?: PromiseOrValue<string> | null,
      newURIText?: null,
      newValue?: null
    ): UpdatedTokenURIEventFilter;
    UpdatedTokenURI(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      newURI?: PromiseOrValue<string> | null,
      newURIText?: null,
      newValue?: null
    ): UpdatedTokenURIEventFilter;
  };

  estimateGas: {
    nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    returnAllowed(
      _party: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnFiiAddress(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setUser(
      tokenId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTokenDeal(
      _tokenId: PromiseOrValue<BigNumberish>,
      _dealType: PromiseOrValue<BigNumberish>,
      _dealAddress: PromiseOrValue<string>,
      _fiiAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userExpires(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    nextTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    returnAllowed(
      _party: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnFiiAddress(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setUser(
      tokenId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      expires: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenDeal(
      _tokenId: PromiseOrValue<BigNumberish>,
      _dealType: PromiseOrValue<BigNumberish>,
      _dealAddress: PromiseOrValue<string>,
      _fiiAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userExpires(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
