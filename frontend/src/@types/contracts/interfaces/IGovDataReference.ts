/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IGovDataReferenceInterface extends utils.Interface {
  functions: {
    "ConsultRegular(uint256)": FunctionFragment;
    "confrontMap(string,uint256)": FunctionFragment;
    "consultMap(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "ConsultRegular" | "confrontMap" | "consultMap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ConsultRegular",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "confrontMap",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "consultMap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ConsultRegular",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confrontMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "consultMap", data: BytesLike): Result;

  events: {
    "ConsultImobReg(uint256)": EventFragment;
    "ConsultMapRural(uint256)": EventFragment;
    "confrontMapEvent(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConsultImobReg"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsultMapRural"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "confrontMapEvent"): EventFragment;
}

export interface ConsultImobRegEventObject {
  _idImob: BigNumber;
}
export type ConsultImobRegEvent = TypedEvent<
  [BigNumber],
  ConsultImobRegEventObject
>;

export type ConsultImobRegEventFilter = TypedEventFilter<ConsultImobRegEvent>;

export interface ConsultMapRuralEventObject {
  _registryRural: BigNumber;
}
export type ConsultMapRuralEvent = TypedEvent<
  [BigNumber],
  ConsultMapRuralEventObject
>;

export type ConsultMapRuralEventFilter = TypedEventFilter<ConsultMapRuralEvent>;

export interface confrontMapEventEventObject {
  _map: string;
  _registryRural: BigNumber;
}
export type confrontMapEventEvent = TypedEvent<
  [string, BigNumber],
  confrontMapEventEventObject
>;

export type confrontMapEventEventFilter =
  TypedEventFilter<confrontMapEventEvent>;

export interface IGovDataReference extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGovDataReferenceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ConsultRegular(
      _idImob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { regular: boolean }>;

    confrontMap(
      _map: PromiseOrValue<string>,
      _registryRural: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    consultMap(
      _registryRural: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { regular: boolean }>;
  };

  ConsultRegular(
    _idImob: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  confrontMap(
    _map: PromiseOrValue<string>,
    _registryRural: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  consultMap(
    _registryRural: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ConsultRegular(
      _idImob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    confrontMap(
      _map: PromiseOrValue<string>,
      _registryRural: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { regular: boolean }>;

    consultMap(
      _registryRural: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ConsultImobReg(uint256)"(
      _idImob?: PromiseOrValue<BigNumberish> | null
    ): ConsultImobRegEventFilter;
    ConsultImobReg(
      _idImob?: PromiseOrValue<BigNumberish> | null
    ): ConsultImobRegEventFilter;

    "ConsultMapRural(uint256)"(
      _registryRural?: PromiseOrValue<BigNumberish> | null
    ): ConsultMapRuralEventFilter;
    ConsultMapRural(
      _registryRural?: PromiseOrValue<BigNumberish> | null
    ): ConsultMapRuralEventFilter;

    "confrontMapEvent(string,uint256)"(
      _map?: null,
      _registryRural?: PromiseOrValue<BigNumberish> | null
    ): confrontMapEventEventFilter;
    confrontMapEvent(
      _map?: null,
      _registryRural?: PromiseOrValue<BigNumberish> | null
    ): confrontMapEventEventFilter;
  };

  estimateGas: {
    ConsultRegular(
      _idImob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confrontMap(
      _map: PromiseOrValue<string>,
      _registryRural: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    consultMap(
      _registryRural: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ConsultRegular(
      _idImob: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confrontMap(
      _map: PromiseOrValue<string>,
      _registryRural: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    consultMap(
      _registryRural: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
