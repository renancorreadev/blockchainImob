/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RentInterface extends utils.Interface {
  functions: {
    "blockImob()": FunctionFragment;
    "endRent()": FunctionFragment;
    "expires()": FunctionFragment;
    "gov()": FunctionFragment;
    "monthPaid(uint256)": FunctionFragment;
    "monthsLeft()": FunctionFragment;
    "payRent()": FunctionFragment;
    "price()": FunctionFragment;
    "renter()": FunctionFragment;
    "tokenId()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "blockImob"
      | "endRent"
      | "expires"
      | "gov"
      | "monthPaid"
      | "monthsLeft"
      | "payRent"
      | "price"
      | "renter"
      | "tokenId"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "blockImob", values?: undefined): string;
  encodeFunctionData(functionFragment: "endRent", values?: undefined): string;
  encodeFunctionData(functionFragment: "expires", values?: undefined): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "monthPaid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "monthsLeft",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "payRent", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(functionFragment: "renter", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenId", values?: undefined): string;

  decodeFunctionResult(functionFragment: "blockImob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endRent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expires", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "monthPaid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "monthsLeft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payRent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;

  events: {
    "MonthPaid(uint256)": EventFragment;
    "RentEnded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MonthPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RentEnded"): EventFragment;
}

export interface MonthPaidEventObject {
  month: BigNumber;
}
export type MonthPaidEvent = TypedEvent<[BigNumber], MonthPaidEventObject>;

export type MonthPaidEventFilter = TypedEventFilter<MonthPaidEvent>;

export interface RentEndedEventObject {
  _party: string;
}
export type RentEndedEvent = TypedEvent<[string], RentEndedEventObject>;

export type RentEndedEventFilter = TypedEventFilter<RentEndedEvent>;

export interface Rent extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blockImob(overrides?: CallOverrides): Promise<[string]>;

    endRent(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    expires(overrides?: CallOverrides): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    monthPaid(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    monthsLeft(overrides?: CallOverrides): Promise<[BigNumber]>;

    payRent(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    renter(overrides?: CallOverrides): Promise<[string]>;

    tokenId(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  blockImob(overrides?: CallOverrides): Promise<string>;

  endRent(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  expires(overrides?: CallOverrides): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  monthPaid(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  monthsLeft(overrides?: CallOverrides): Promise<BigNumber>;

  payRent(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  renter(overrides?: CallOverrides): Promise<string>;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    blockImob(overrides?: CallOverrides): Promise<string>;

    endRent(overrides?: CallOverrides): Promise<void>;

    expires(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    monthPaid(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    monthsLeft(overrides?: CallOverrides): Promise<BigNumber>;

    payRent(overrides?: CallOverrides): Promise<void>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    renter(overrides?: CallOverrides): Promise<string>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "MonthPaid(uint256)"(
      month?: PromiseOrValue<BigNumberish> | null
    ): MonthPaidEventFilter;
    MonthPaid(
      month?: PromiseOrValue<BigNumberish> | null
    ): MonthPaidEventFilter;

    "RentEnded(address)"(
      _party?: PromiseOrValue<string> | null
    ): RentEndedEventFilter;
    RentEnded(_party?: PromiseOrValue<string> | null): RentEndedEventFilter;
  };

  estimateGas: {
    blockImob(overrides?: CallOverrides): Promise<BigNumber>;

    endRent(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    expires(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    monthPaid(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    monthsLeft(overrides?: CallOverrides): Promise<BigNumber>;

    payRent(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    renter(overrides?: CallOverrides): Promise<BigNumber>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    blockImob(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endRent(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    expires(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    monthPaid(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    monthsLeft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payRent(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
