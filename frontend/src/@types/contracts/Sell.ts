/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface SellInterface extends utils.Interface {
  functions: {
    "blockImob()": FunctionFragment;
    "buyer()": FunctionFragment;
    "buyerMediator()": FunctionFragment;
    "executeSell()": FunctionFragment;
    "gov()": FunctionFragment;
    "price()": FunctionFragment;
    "sellApproved(address)": FunctionFragment;
    "seller()": FunctionFragment;
    "setApproveSell(bool)": FunctionFragment;
    "setPrice(uint256)": FunctionFragment;
    "tokenId()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "blockImob"
      | "buyer"
      | "buyerMediator"
      | "executeSell"
      | "gov"
      | "price"
      | "sellApproved"
      | "seller"
      | "setApproveSell"
      | "setPrice"
      | "tokenId"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "blockImob", values?: undefined): string;
  encodeFunctionData(functionFragment: "buyer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyerMediator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeSell",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellApproved",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "seller", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setApproveSell",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "tokenId", values?: undefined): string;

  decodeFunctionResult(functionFragment: "blockImob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyerMediator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApproveSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;

  events: {
    "PriceSet(address,uint256)": EventFragment;
    "SellExecuted(address,uint256)": EventFragment;
    "SetSellApproved(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PriceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSellApproved"): EventFragment;
}

export interface PriceSetEventObject {
  party: string;
  newPrice: BigNumber;
}
export type PriceSetEvent = TypedEvent<
  [string, BigNumber],
  PriceSetEventObject
>;

export type PriceSetEventFilter = TypedEventFilter<PriceSetEvent>;

export interface SellExecutedEventObject {
  party: string;
  currPrice: BigNumber;
}
export type SellExecutedEvent = TypedEvent<
  [string, BigNumber],
  SellExecutedEventObject
>;

export type SellExecutedEventFilter = TypedEventFilter<SellExecutedEvent>;

export interface SetSellApprovedEventObject {
  party: string;
  approved: boolean;
}
export type SetSellApprovedEvent = TypedEvent<
  [string, boolean],
  SetSellApprovedEventObject
>;

export type SetSellApprovedEventFilter = TypedEventFilter<SetSellApprovedEvent>;

export interface Sell extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SellInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blockImob(overrides?: CallOverrides): Promise<[string]>;

    buyer(overrides?: CallOverrides): Promise<[string]>;

    buyerMediator(overrides?: CallOverrides): Promise<[string]>;

    executeSell(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellApproved(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    seller(overrides?: CallOverrides): Promise<[string]>;

    setApproveSell(
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrice(
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenId(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  blockImob(overrides?: CallOverrides): Promise<string>;

  buyer(overrides?: CallOverrides): Promise<string>;

  buyerMediator(overrides?: CallOverrides): Promise<string>;

  executeSell(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gov(overrides?: CallOverrides): Promise<string>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  sellApproved(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  seller(overrides?: CallOverrides): Promise<string>;

  setApproveSell(
    _approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrice(
    _newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    blockImob(overrides?: CallOverrides): Promise<string>;

    buyer(overrides?: CallOverrides): Promise<string>;

    buyerMediator(overrides?: CallOverrides): Promise<string>;

    executeSell(overrides?: CallOverrides): Promise<void>;

    gov(overrides?: CallOverrides): Promise<string>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    sellApproved(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    seller(overrides?: CallOverrides): Promise<string>;

    setApproveSell(
      _approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrice(
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "PriceSet(address,uint256)"(
      party?: PromiseOrValue<string> | null,
      newPrice?: null
    ): PriceSetEventFilter;
    PriceSet(
      party?: PromiseOrValue<string> | null,
      newPrice?: null
    ): PriceSetEventFilter;

    "SellExecuted(address,uint256)"(
      party?: PromiseOrValue<string> | null,
      currPrice?: null
    ): SellExecutedEventFilter;
    SellExecuted(
      party?: PromiseOrValue<string> | null,
      currPrice?: null
    ): SellExecutedEventFilter;

    "SetSellApproved(address,bool)"(
      party?: PromiseOrValue<string> | null,
      approved?: null
    ): SetSellApprovedEventFilter;
    SetSellApproved(
      party?: PromiseOrValue<string> | null,
      approved?: null
    ): SetSellApprovedEventFilter;
  };

  estimateGas: {
    blockImob(overrides?: CallOverrides): Promise<BigNumber>;

    buyer(overrides?: CallOverrides): Promise<BigNumber>;

    buyerMediator(overrides?: CallOverrides): Promise<BigNumber>;

    executeSell(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    sellApproved(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seller(overrides?: CallOverrides): Promise<BigNumber>;

    setApproveSell(
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrice(
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    blockImob(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyerMediator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeSell(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellApproved(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApproveSell(
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrice(
      _newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
