/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PaymentsManagementInterface extends utils.Interface {
  functions: {
    "rentToken(uint256,address,uint256,uint256)": FunctionFragment;
    "sellToken(uint256,address,address,address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "rentToken" | "sellToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "rentToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sellToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "rentToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellToken", data: BytesLike): Result;

  events: {
    "Rented(uint256,address,uint256,uint256)": EventFragment;
    "SellDeployed(address,address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Rented"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellDeployed"): EventFragment;
}

export interface RentedEventObject {
  tokenId: BigNumber;
  renter: string;
  period: BigNumber;
  price: BigNumber;
}
export type RentedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  RentedEventObject
>;

export type RentedEventFilter = TypedEventFilter<RentedEvent>;

export interface SellDeployedEventObject {
  party: string;
  buyer: string;
  seller: string;
  sellContract: string;
  amount: BigNumber;
}
export type SellDeployedEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  SellDeployedEventObject
>;

export type SellDeployedEventFilter = TypedEventFilter<SellDeployedEvent>;

export interface PaymentsManagement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PaymentsManagementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    rentToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      _renter: PromiseOrValue<string>,
      _days: PromiseOrValue<BigNumberish>,
      _rentPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _moderatorFrom: PromiseOrValue<string>,
      _moderatorTo: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  rentToken(
    _tokenId: PromiseOrValue<BigNumberish>,
    _renter: PromiseOrValue<string>,
    _days: PromiseOrValue<BigNumberish>,
    _rentPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellToken(
    _tokenId: PromiseOrValue<BigNumberish>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _moderatorFrom: PromiseOrValue<string>,
    _moderatorTo: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    rentToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      _renter: PromiseOrValue<string>,
      _days: PromiseOrValue<BigNumberish>,
      _rentPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sellToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _moderatorFrom: PromiseOrValue<string>,
      _moderatorTo: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Rented(uint256,address,uint256,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      renter?: PromiseOrValue<string> | null,
      period?: null,
      price?: null
    ): RentedEventFilter;
    Rented(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      renter?: PromiseOrValue<string> | null,
      period?: null,
      price?: null
    ): RentedEventFilter;

    "SellDeployed(address,address,address,address,uint256)"(
      party?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      sellContract?: null,
      amount?: null
    ): SellDeployedEventFilter;
    SellDeployed(
      party?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      sellContract?: null,
      amount?: null
    ): SellDeployedEventFilter;
  };

  estimateGas: {
    rentToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      _renter: PromiseOrValue<string>,
      _days: PromiseOrValue<BigNumberish>,
      _rentPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _moderatorFrom: PromiseOrValue<string>,
      _moderatorTo: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    rentToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      _renter: PromiseOrValue<string>,
      _days: PromiseOrValue<BigNumberish>,
      _rentPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellToken(
      _tokenId: PromiseOrValue<BigNumberish>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _moderatorFrom: PromiseOrValue<string>,
      _moderatorTo: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
